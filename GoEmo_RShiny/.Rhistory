ggplot(aes(year, n)) + geom_col()
arthistory %>%
group_by(year, artist_gender) %>%
summarize(n()) %>%
ggplot(aes(year, n())) + geom_col()
arthistory %>%
group_by(year, artist_gender) %>%
summarize(n())
ggplot(aes(year, n) + geom_col()
arthistory %>%
group_by(year, artist_gender) %>%
summarize(n = n()) %>%
ggplot(aes(year, n)) + geom_col()
arthistory %>%
group_by(year, artist_gender) %>%
summarize(n = n()) %>%
ggplot(aes(year, n, fill = artist_gender)) + geom_col()
arthistry %>%
count()
arthistry %>%
count(year, artist_gender)
arthistory %>%
count(year, artist_gender)
arthistory %>%
count(year, artist_gender) %>%
group_by(year) %>%
mutate(proportion = n/sum(n))
arthistory %>%
count(year, artist_gender) %>%
group_by(year) %>%
mutate(proportion = n/sum(n)) %>%
ggplot(aes(year, proportion, fill = artist_gender)) +
geom_col()
arthistory %>%
count(year, artist_gender) %>%
group_by(year) %>%
mutate(proportion = n/sum(n)) %>%
ggplot(aes(year, proportion, fill = artist_gender)) +
geom_col(alpha = 0.8)
arthistory %>%
count(year, artist_gender) %>%
group_by(year) %>%
mutate(proportion = n/sum(n)) %>%
ggplot(aes(year, proportion, fill = artist_gender)) +
geom_col(alpha = 0.8) +
scale_y_continuous(labels = scales::percent)
arthistory %>%
ggplot(aes(year, space_ratio_per_page_total, fill = artist_gender)) + geom_boxplot()
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot()
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE)
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender)
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncols = 1)
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(vars(artist_gender), ncols = 1)
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(vars = artist_gender, ncols = 1)
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(vars = artist_gender, ncol = 1)
arthistory %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncol = 1)
1993 %/% 10
10 *1993 %/% 10
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncol = 1)
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncol = 1) +
scale_y_log()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncol = 1) +
scale_y_log10()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_nationality)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncol = 1) +
scale_y_log10()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_nationality)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_nationality, ncol = 1) +
scale_y_log10()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncol = 1) +
scale_y_log10()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_race_nwi)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_race_nwi, ncol = 1) +
scale_y_log10()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_race_nwi)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_race_nwi, ncol = 1) +
scale_y_log10()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_race_nwi)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_race_nwi, ncol = 1) +
scale_y_log10() +
scale_y_continuous(labels = scales::percent)
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_race_nwi)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_race_nwi, ncol = 1) +
scale_y_log10()
arthistory %>%
mutate(year = 10 * (year %/% 10)) %>%
ggplot(aes(as.factor(year), space_ratio_per_page_total, fill = artist_gender)) +
geom_boxplot(show.legend = FALSE) +
facet_wrap(~artist_gender, ncol = 1) +
scale_y_log10()
1993 %/% 10
1993 %% 10
1993 %/% 20
1993 %/% 30
1993 %/% 10
(1993 %/% 10) * 10
1993/10
1993 %/% 10
round(1993/10)
round(1993/10)*10
round(1993/10)*10
library(shiny)
library(tidyverse)
dota_comments <- read_csv("GitHub/GoEmotions_Brainstation_Cap/dota_comments.csv")
View(dota_comments)
dota_comments %>% group_by(logpred) %>% summarize(n())
dota_comments %>% group_by(logpred) %>% summarize(n()) %>% ggplot(aes(logpred, n())) + geom_col()
dota_comments %>% group_by(logpred) %>% summarize(n()) %>% ggplot(aes(logpred, `n()`)) + geom_col()
dota_comments %>% group_by(logpred) %>% summarize(n()) %>% ggplot(aes(logpred, `n()`, color = logpred)) + geom_col()
dota_comments %>%
group_by(logpred) %>%
summarize(n()) %>%
ggplot(aes(logpred, `n()`, color = as.factor(logpred))) + geom_col()
dota_comments %>%
group_by(logpred) %>%
summarize(n()) %>%
ggplot(aes(logpred, `n()`, fill= as.factor(logpred))) + geom_col()
colnames(dota_comments)
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
dota_comments %>%
group_by(logpred) %>%
summarize(n())
dota_comments %>%
group_by(logpred) %>%
summarize(n()) %>%
ggplot(aes(logpred, `n()`, fill= as.factor(logpred))) + geom_col()
runApp('GitHub/shiny_apps/Selex_selection_ngs')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
dota_comments %>%
group_by(logpred) %>%
summarize(n())
dota_comments %>%
group_by(logpred) %>%
summarize(sum = n())
test <- dota_comments %>%
group_by(logpred) %>%
summarize(sum = n())
test[1]
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
test[1]
test[2]
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
test <- dota_comments %>%
group_by(logpred) %>%
count()
View(test)
test[2]
test[1]
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
colnames(dota_comments)
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
test$1
test$1
test <- dota_comments %>%
group_by(logpred) %>%
count()
View(test)
test$logpred
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
test$logpred
test <- dota_comments %>%
group_by(logpred) %>%
count() %>%
plot()
test <- dota_comments %>%
group_by(logpred) %>%
count() %>%
ggplot(aes(logpred, n)) + geom_col
test <- dota_comments %>%
group_by(logpred) %>%
count() %>%
ggplot(aes(logpred, n)) + geom_col()
test <- dota_comments %>%
group_by(logpred) %>%
count() %>%
ggplot(aes(logpred, n)) + geom_col()
dota_comments %>%
group_by(logpred) %>%
count() %>%
ggplot(aes(logpred, n)) +
geom_col()
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
dota_comments %>%
group_by(logpred) %>%
count() %>%
ggplot(aes(logpred, n)) +
geom_col()
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
colnames(dota_comments)
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
dota_comments %>%
group_by(logpred) %>%
count() %>%
ggplot(aes(logpred, n)) +
geom_col()
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
test <- dota_comments %>%
group_by(logpred) %>%
count()
test
test %>% ggplot(aes(test[1], test[2])) + geom_col()
test %>% ggplot(aes(test$logpred, test[2])) + geom_col()
test %>% ggplot(aes(test$logpred, test$n)) + geom_col()
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
test[1]
as.list(test[1])
list(test[1])
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
runApp('GitHub/GoEmotions_Brainstation_Cap/GoEmo_RShiny')
# import libraries
library(shiny)
library(tidyverse)
# read in data
dota_comments <- read_csv("dota_comments.csv")
# read in data
dota_comments <- read_csv("dota_comments.csv")
getwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
# read in data
dota_comments <- read_csv("dota_comments.csv")
dota_comments %>% ggplot(aes(logred)) + geom_bar()
dota_comments %>% ggplot(aes(logpred)) + geom_bar()
runApp()
dota_comments %>% ggplot(aes('logpred')) + geom_bar()
?parse
dota_comments %>% ggplot(aes(parse('logpred'))) + geom_bar()
dota_comments %>% ggplot(aes(parse(text ='logpred'))) + geom_bar()
eval(pase(text = 'logpred'))
eval(parse(text = 'logpred'))
dota_comments %>% ggplot(aes(eval(parse(text = 'logpred'))) + geom_bar()
dota_comments %>% ggplot(aes(eval(parse(text = 'logpred')))) + geom_bar()
runApp()
runApp()
runApp()
runApp()
dota_comments %>% ggplot(aes(eval(parse(text = 'logpred')), color = logpred)) + geom_bar()
dota_comments %>% ggplot(aes(eval(parse(text = 'logpred')), color = logpred)) + geom_bar()
dota_comments %>% ggplot(aes(eval(parse(text = 'logpred')), fill = logpred)) + geom_bar()
dota_comments %>% ggplot(
aes(
x = eval(parse(text = 'logpred')),
fill = eval(parse(text = 'logpred')))) +
geom_bar()
dota_comments %>% ggplot(
aes(
x = eval(parse(text = 'logpred')),
fill = eval(parse(text = 'logpred')))) +
geom_bar()
runApp()
runApp()
runApp()
# import libraries
library(shiny)
library(tidyverse)
# set to current directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# set to current directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# read in data
dota_comments <- read_csv("dota_comments.csv")
dota_comments %>% ggplot(
aes(
x = eval(parse(text = 'logpred')), )) +
geom_bar()
View(dota_comments)
colnames(dota_comments)
runApp()
runApp()
install.packages("scatterplot3d")
library("scatterplot3d")
scatterplot3d(dota_comments[,6:8], pch = 16, color = Logistic_Regression,
grid=TRUE, box=FALSE)
scatterplot3d(dota_comments[,6:8], pch = 16, color = dota_comments$Logistic_Regression,
grid=TRUE, box=FALSE)
scatterplot3d(dota_comments[,6:8], pch = 16, color = dota_comments$Logistic_Regression,
grid=TRUE, box=FALSE, legend = dota_comments$Logistic_Regression)
dota_comments %>% ggplot(aes(PCA1, PCA2)) + geom_point()
dota_comments %>% ggplot(aes(PCA1, PCA2, color = Logistic_Regression)) + geom_point()
dota_comments %>% ggplot(aes(PCA1, PCA2, color = as.factor(Logistic_Regression))) + geom_point()
dota_comments %>% ggplot(aes(PCA1, PCA3, color = as.factor(Logistic_Regression))) + geom_point()
dota_comments %>% ggplot(aes(PCA2, PCA3, color = as.factor(Logistic_Regression))) + geom_point()
install.packages("plotly")
install.packages("plotly")
library(plotly)
# import libraries
library(shiny)
library(tidyverse)
runApp()
plot_ly(x=dota_comments$PCA1,
y=dota_comments$PCA2,
z=dota_comments$PCA3,
type="scatter3d",
mode="markers",
color=dota_comments$Logistic_Regression)
plot_ly(x=dota_comments$PCA1,
y=dota_comments$PCA2,
z=dota_comments$PCA3,
type="scatter3d",
mode="markers",
color=as.factor(dota_comments$Logistic_Regression))
plot_ly(x=dota_comments$PCA1,
y=dota_comments$PCA2,
z=dota_comments$PCA3,
type="scatter3d",
mode="markers",
color=as.factor(dota_comments$SVM))
plot_ly(x=dota_comments$PCA1,
y=dota_comments$PCA2,
z=dota_comments$PCA3,
type="scatter3d",
color=as.factor(dota_comments$SVM))
runApp()
runApp()
runApp()
dota_comments %>% ggplot(aes(PC1, PC2, color = as.factor(Logistic_Regression))) + geom_point()
dota_comments %>% ggplot(aes(PCA1, PCA2, color = as.factor(Logistic_Regression))) +
geom_point()
runApp()
dota_comments %>%
ggplot(aes(PCA2, PCA2, color = as.factor(Logistic_Regression))) +
geom_point()
dota_comments %>%
ggplot(aes(PCA2, PCA3, color = as.factor(Logistic_Regression))) +
geom_point()
dota_comments %>%
ggplot(aes(PCA1, PCA3, color = as.factor(Logistic_Regression))) +
geom_point()
runApp()
dota_comments %>%
ggplot(aes(PCA1, PCA3, color = as.factor(Logistic_Regression), size = 2)) +
geom_point()
dota_comments %>%
ggplot(aes(PCA1, PCA3, color = as.factor(Logistic_Regression), size = 1)) +
geom_point()
dota_comments %>%
ggplot(aes(PCA1, PCA3, color = as.factor(Logistic_Regression), size = 0.5)) +
geom_point()
dota_comments %>%
ggplot(aes(PCA1, PCA3, color = as.factor(Logistic_Regression), size = 3)) +
geom_point()
dota_comments %>%
ggplot(aes(PCA1, PCA3, color = as.factor(Logistic_Regression), size = 10)) +
geom_point()
dota_comments %>%
ggplot(aes(PCA1, PCA3,
color = as.factor(Logistic_Regression),
size = 10,
alpha = 0.5)) +
geom_point()
runApp()
runApp()
runApp()
plot_ly(iris,
x = ~get(input$choice),
y = ~Sepal.Length,
type = 'scatter',
mode = 'markers')
plot_ly(dota_comments,
x = ~get(input$choice),
y = ~Sepal.Length,
type = 'scatter',
mode = 'markers')
library(plotly)
plot_ly(dota_comments,
x = ~get(input$choice),
y = ~Sepal.Length,
type = 'scatter',
mode = 'markers')
plot_ly(dota_comments,
x = PCA1,
y = PCA3,
type = 'scatter',
mode = 'markers')
plot_ly(dota_comments,
x = ~PCA1,
y = ~PCA3,
type = 'scatter',
mode = 'markers')
runApp()
runApp()
plot_ly(dota_comments,
x = ~PCA1,
y = ~PCA3,
type = 'scatter',
mode = 'markers')
runApp()
}
runApp()
runApp()
runApp()
runApp()
plot_ly(dota_comments,
x = ~PCA1,
y = ~PCA3,
type = 'scatter',
mode = 'markers',
color = Logistic_Regression)
plot_ly(dota_comments,
x = ~PCA1,
y = ~PCA3,
type = 'scatter',
mode = 'markers',
color = Logistic_Regression)
plot_ly(dota_comments,
x = ~PCA1,
y = ~PCA3,
type = 'scatter',
mode = 'markers',
color = ~Logistic_Regression)
plot_ly(dota_comments,
x = ~PCA1,
y = ~PCA3,
type = 'scatter',
mode = 'markers',
color = ~as.factor(Logistic_Regression))
runApp()
runApp()
runApp()
runApp()
dota_comments %>%
ggplot(aes(PCA1, PCA3,
color = as.factor(Logistic_Regression),
size = 10,
alpha = 0.5)) +
geom_point()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# read in data
dota_comments <- read_csv("dota_comments.csv")
dota_comments <- tibble::rowid_to_column(dota_comments, "ID")
View(dota_comments)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
